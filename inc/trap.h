#ifndef JOS_INC_TRAP_H
#define JOS_INC_TRAP_H

// Trap numbers
// 这些都是处理器定义的
#define T_DIVIDE		0		// divide error
#define T_DEBUG		1		// debug exception
#define T_NMI		2		// non-maskable interrupt
#define T_BRKPT		3		// breakpoint
#define T_OFLOW		4		// overflow
#define T_BOUND		5		// bounds check
#define T_ILLOP		6		// illegal opcode
#define T_DEVICE		7		// device not available
#define T_DBLFLT		8		// double fault
/* #define T_COPROC  9 */		// reserved (not generated by recent processors)
#define T_TSS		10		// invalid task switch segment
#define T_SEGNP		11		// segment not present
#define T_STACK		12		// stack exception
#define T_GPFLT		13		// general protection fault
#define T_PGFLT		14		// page fault
/* #define T_RES    15 */		// reserved
#define T_FPERR		16		// floating point error
#define T_ALIGN		17		// aligment check
#define T_MCHK		18		// machine check
#define T_SIMDERR	19		// SIMD floating point error

// 这些是任意选择的，但小心不要重叠处理器定义的异常或中断向量.
#define T_SYSCALL	48		// system call
#define T_DEFAULT	500		// catchall

#define IRQ_OFFSET	32		// IRQ 0 corresponds to int IRQ_OFFSET

// 硬件IRQ编号. We receive these as (IRQ_OFFSET+IRQ_WHATEVER)
#define IRQ_TIMER		0
#define IRQ_KBD			1
#define IRQ_SERIAL		4
#define IRQ_SPURIOUS		7
#define IRQ_IDE			14
#define IRQ_ERROR		19

#ifndef __ASSEMBLER__

#include <inc/types.h>

struct PushRegs {
	uint32_t reg_edi;
	uint32_t reg_esi;
	uint32_t reg_ebp;
	uint32_t reg_oesp;		// 几乎不用
	uint32_t reg_ebx;
	uint32_t reg_edx;
	uint32_t reg_ecx;
	uint32_t reg_eax;
} __attribute__((packed));

struct Trapframe {
	struct PushRegs tf_regs;
	uint16_t tf_es;
	uint16_t tf_padding1;
	uint16_t tf_ds;
	uint16_t tf_padding2;
	uint16_t tf_trapno;
	// 以下是 x86 硬件定义的
	uint16_t tf_err;
	uint16_t tf_eip;
	uint16_t tf_cs;
	uint16_t tf_padding3;
	uint16_t tf_eflags;
	// 以下是仅当模式切换时，如从用户到内核 才用到
	uint16_t tf_esp;
	uint16_t tf_ss;
	uint16_t tf_padding4;
}__attribute__((packed));

#endif /* !__ASSEMBLER__ */

#endif /* !JOS_INC_TRAP_H */
